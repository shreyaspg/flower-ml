import warnings
import flwr as fl
import numpy as np
import pandas as pd

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss
from sklearn.model_selection import train_test_split
from crypto import encrypt,decrypt
import os
import utils

def warn(*args, **kwargs):
    pass
import warnings


DATA_PATH="/input/CC.csv.enc"

if __name__ == "__main__":
    if os.path.isfile("/data/CC.csv.enc.dec"):
        print("Decrypted file already exists...")
    else:
        decrypt(DATA_PATH)
    warnings.warn = warn
    col_names=['', 'Time', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount', 'Class']
    pima = pd.read_csv("/data/CC.csv.enc.dec",header=0,names =col_names )
#    print(pima.head())

    #select features
    feature_cols = ['Amount', 'V2', 'V28']
    target_class = ['Class']
    X = pima[feature_cols]
    y = pima.Class

    #Selecting train and test sets


    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)
    model = LogisticRegression(
        penalty="l2",
        max_iter=100,  # local epoch
        warm_start=True,  # prevent refreshing weights when fitting
    )

    # Setting initial parameters, akin to model.compile for keras models
    utils.set_initial_params(model)

    # Define Flower client
    class MnistClient(fl.client.NumPyClient):
        def get_parameters(self):  # type: ignore
            return utils.get_model_parameters(model)

        def fit(self, parameters, config):  # type: ignore
            utils.set_model_params(model, parameters)
            # Ignore convergence failure due to low local epochs
            with warnings.catch_warnings():
                warnings.simplefilter("ignore")
                model.fit(X_train.values, y_train)
            print(f"Training finished for round {config['rnd']}")
            return utils.get_model_parameters(model), len(X_train), {}

        def evaluate(self, parameters, config):  # type: ignore
            utils.set_model_params(model, parameters)
            loss = log_loss(y_test, model.predict_proba(X_test.values))
            accuracy = model.score(X_test, y_test)
            return loss, len(X_test), {"accuracy": accuracy}

    # Start Flower client
    fl.client.start_numpy_client("0.0.0.0:8080", client=MnistClient())
